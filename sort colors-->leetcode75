Problem:
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Follow up:

Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only O(1) constant space?
 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
Example 3:

Input: nums = [0]
Output: [0]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is 0, 1, or 2

solution:
var sortColors = function(nums) {
    let zeros = 0;
    let ones = 0;
    let twos = 0;
    for(let i=0;i<nums.length;i++){
        if(nums[i] === 0){
             zeros++;
           } else if(nums[i] === 1){
                     ones++;
                     } else if (nums[i] === 2){
            twos++
        }
    }
    nums = nums.fill(0, 0, zeros)//fill with 0 from index 0 till zeros index
    nums=  nums.fill(1, zeros, zeros+ones)
     nums = nums.fill(2, zeros+ ones, nums.length)
};
