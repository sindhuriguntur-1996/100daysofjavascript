Problem:
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true

Solution:
/**
 * @param {string} s
 * @return {boolean}
 */
//var isValid = function(s) {
   var isValid = function(s) {
    if (!s || s.length == 0) return true; //empty string is valid
    let stack = [];
    for (let i = 0; i < s.length; i++){
        if (s[i] == '(' || s[i] == '{' || s[i] == '['){
            stack.push(s[i]);
            console.log(stack)
            
        }
        else{
            if (stack.length == 0) return false;
            let pop = stack.pop();
            console.log("pop",pop)
            if ((pop != '(' && s[i] == ')') || (pop != '{' && s[i] == '}') || (pop != '[' && s[i] == ']')) return false;
        }
    }
    return stack.length == 0;
}; 
