Problem:
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

solution:
var letterCombinations = function(digits) {
    var res=[]
     if (digits==""){
         return []
     }
    else{
      const map = {
    2: 'abc',
    3: 'def',
    4: 'ghi',
    5: 'jkl',
    6: 'mno',
    7: 'pqrs',
    8: 'tuv',
    9: 'wxyz',
  };
      
       
        var result=""
        const combs=(i,s)=>{
            if(i==digits.length){
                res.push(s);
                return
            }
            for(const c of(map[digits[i]])){
                combs(i+1,s+c)
            }
        }
        combs(0,'');
        return res;
        }
}
