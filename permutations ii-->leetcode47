Problem:
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

solution:
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permuteUnique = function(nums) {
   const result=[];
   const temp=[];
    //var unique=new Set()
    perm(temp,nums,result);
    return result;
}
function perm(temp,nums,result){
    if(!nums.length){
        result.push([...temp])
        return;
    }
    nums.sort()
    for(let i=0;i<nums.length;i++){
         if(i > 0 && nums[i] === nums[i-1]) { 
             continue; 
         }
        else{
        let frst=nums[i];
        temp.push(frst);
        nums.splice(i,1)
        perm(temp,nums,result);
        temp.pop();
        nums.splice(i,0,frst)
    }
   
}}
