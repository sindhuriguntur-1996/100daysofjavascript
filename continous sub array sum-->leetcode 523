Problem:
523. Continuous Subarray Sum
Medium

1698

2365

Add to List

Share
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

 

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
 

Constraints:

The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.

solution:
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {boolean}
 */
var checkSubarraySum = function(nums, k) {
    var left=0;
    var right=0;
    var sum=0;    
   while (left < nums.length && right < nums.length) {
        while (right < nums.length) {
        sum+=nums[right];
            //console.log(sum);
       if((right-left+1>=2) && (sum==0) && k==0){
           return true;
       }
       if((right-left+1>=2) && (sum%k==0)){
           return true;
       }
       right++;
   }
    left++;
    right=left;
    sum=0;
}

    return false;
};
