Problem:
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

solution:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var searchRange = function(nums, target) {
    var start=0;var end=nums.length-1;
    while(start<=end){
        var middle=Math.floor((start+end)/2)
        if(nums[middle]>=target){
            end=middle-1;
            
        }else{
            start=middle+1;
        }}
    if(nums[start]!==target){
            return [-1,-1]
        }
   var low=0;
    var high=nums.length-1;
    while(low<=high){
        var mid=Math.floor((low+high)/2)
        if(nums[mid]<=target){
            low=mid+1;
        }else{
            high=mid-1;
        }}
    return [start,high];
    
};


