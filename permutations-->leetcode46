Problem:
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

Solution:
var permute = function(nums) {
    let ret = []
    helper3(nums, [], ret)
    return ret
}

var helper3 = function(nums, arr, ret) {
    if (nums.length == 0) {
        ret.push(arr.slice())
        console.log('ret',ret)
    } else {
        console.log('ochina')
        for (let i = 0; i < nums.length; i++) {
            let temp = nums[i]
            arr.push(temp)
            nums.splice(i, 1)
           // console.log('after result')
            helper3(nums, arr, ret)
          //  console.log('numsb4',nums)
           // console.log('i',i)
           // console.log('temp',temp)
            nums.splice(i, 0, temp)
           //  console.log('numsa4',nums)
           // console.log('arr',arr)
            arr.pop()
           //  console.log('arra4',arr)
           // console.log('nenu')
        }
    }
}
