Problem:
You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
All values of nums are unique.
nums is guranteed to be rotated at some pivot.
-10^4 <= target <= 10^4


solution:
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
/*var search = function(nums, target) {
        if(nums.includes(target)){
            return nums.indexOf(target);
        }else{
            return -1;
        }
    }*/
var search = function(nums, target) {
   var start=0,end=nums.length-1;
    for(var i=0;i<nums.length;i++){
        var mid=Math.floor((start+end)/2);  
        if(target===nums[mid]) return mid;
        if(target===nums[start]) return start;
        if(target===nums[end]) return end;
        if(nums[mid]>nums[start]){
            if(target<=nums[mid] && target>=nums[start]){
              end=mid-1;  
            }else{
                start=mid+1
            }
        }else if(nums[mid]<nums[end]){
            if(target>nums[mid] && target<nums[end]){
                start=mid+1;
            }else{
                end=mid-1
            }
        }
    }return -1;
}
