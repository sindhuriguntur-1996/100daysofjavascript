Problem:
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

solution:
/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
    var map=new Map();
    for(let i=0;i<nums.length;i++){
        if(!map.has(nums[i])){
            map.set(nums[i],1)
        }else{
            map.set(nums[i], map.get(nums[i])+1);
        }
    }for(const [key,val] of map.entries()){
        if(val==1){
            console.log(key);
          return key;  
        }
    }
};
