Problem:
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters

solution:
/**
 * @param {string[]} strs
 * @return {string[][]}
 */
var groupAnagrams = function(strs) {
    var op=[];
    var map=new Map()
    var set=new Set()
    var set1=new Set()
    for(var i=0;i<strs.length;i++){
        var st=sortorder(strs[i])
        if(!map.has(st)){
            map.set(st,[strs[i]]);
        }else{
            map.get(st).push(strs[i])
        }
    
    }
    for([key,val] of map.entries()){
        op.push(val)
    }return op;
};

var sortorder = function(text) {
    var s=text+'';
    return s.split('').sort().join('');
};
