Problem:
Given a 32-bit signed integer, reverse digits of an integer.

Note:
Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0

solution:
/**
 * @param {number} x
 * @return {number}
 */
var reverse = function(x) {
   const negative = x < 0 ? -1 : 1
    let output = 0
    x = Math.abs(x)
    while (x > 0) {
        const remainder = x % 10 
        output = output * 10 + remainder
        x = Math.floor(x / 10)
    }
    if (output > Math.pow(2,31)) return 0
    return output * negative
};
