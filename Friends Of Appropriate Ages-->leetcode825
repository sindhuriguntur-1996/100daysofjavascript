Problem:
Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. 

Person A will NOT friend request person B (B != A) if any of the following conditions are true:

age[B] <= 0.5 * age[A] + 7
age[B] > age[A]
age[B] > 100 && age[A] < 100
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?

Example 1:

Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
 

Notes:

1 <= ages.length <= 20000.
1 <= ages[i] <= 120


solution:
/**
 * @param {number[]} ages
 * @return {number}
 */
var numFriendRequests = function(ages) {   
var [age,rst] = [new Map(),0];
    for(a of ages){
        age.set(a,(age.get(a)||0)+1);
    }
    for([a,countA] of age){
        for([b,countB] of age){
            if(b<=(0.5*a+7) || a<b || (b>100 && a<100) ) continue;
            else rst+=countA*countB;
            if(a==b) rst-=countA;
        }
    }
    return rst
}

/*
var numFriendRequests = function(ages) {
   var left=0;
    var right=0;
    var count=0;
    if(ages.length<=2){
        return ages.length;
    }
    while(left<ages.length && right< ages.length){
        while(right<ages.length){     
           if((check([ages[left],ages[right]])) && left!=right){
               count++;
           }    
            right++; 
        }
         left++;
        right=0;
       
    }return count;
};

function check(arr){
    if(arr[1]<=((0.5 * arr[0]) + 7)){
        return false
    }else if(arr[1]>arr[0]){
        return false
    }else if(arr[1]>100 && arr[0]<100){
        return false
    }else{
        return true;
    }
}
*/



